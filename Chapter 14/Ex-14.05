{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Ex-14.05","provenance":[{"file_id":"10hvfTMmBBlR2MsT4HhfaOXdXoD0JvoZd","timestamp":1650268819028},{"file_id":"1yOG_PZqUy9-E885DzHYDwxQxtpTXWBVc","timestamp":1650222097967}],"collapsed_sections":["k5wiSFUICXNj","vZyzOaIgEoG5","1W0nQsbCEyz2","f2sJ3xoXE-RN","SVv7-MlmFEwj","jVjyNM0jFTAY","Nb6_HuvOFpi3","AVL_N5IdF84H","h1ADw3WxGX_0","CMrW5QsVGdAr","XY17NgaN7fXh","u_J2jsXr8NqU","KTYS9KVzsySn","T9Wgpegl8XBw","RQX23YKBtGug","gfe2B2Vi9Be7","_7_s3KHp9IS-","jFlSJABn9OSQ","WTK74W8w9RJo","1usBp6_89Y4J","eAyBVRsj9d-G"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **Exercise 14.05:**\n","###  Dimensionality Reduction Using Independent Component Analysis"],"metadata":{"id":"vgjhsBZkQqJt"}},{"cell_type":"markdown","source":["### Importing Modules"],"metadata":{"id":"k5wiSFUICXNj"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"C3ZLhsDjB4HU"},"outputs":[],"source":["import pandas as pd\n"]},{"cell_type":"markdown","source":["### Loading  Data"],"metadata":{"id":"PqE9wfDvCoqC"}},{"cell_type":"code","source":["# Defining file name of the git hub repository\n","\n","filename = 'https://raw.githubusercontent.com/fenago/DSBook/main/Chapter%2014/hcvdata.csv'\n"],"metadata":{"id":"HnjcyPM6CPz4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Loading the data using pandas\n","\n","adData = pd.read_csv(filename,sep=\",\",header = None,error_bad_lines=False)\n","adData.head()"],"metadata":{"id":"HR08AVBlCRH-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing the Shape of  the Dataset"],"metadata":{"id":"vZyzOaIgEoG5"}},{"cell_type":"code","source":["# Printing the shape of the data\n","print(adData.shape)"],"metadata":{"id":"A710VMACDgok"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Finding the summary of the numerical raw data using .describe() function"],"metadata":{"id":"1W0nQsbCEyz2"}},{"cell_type":"code","source":["#Summarizing the statistics of the numerical raw data\n","adData.describe()"],"metadata":{"id":"dEAQn-PeDqan"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Seperating the dependent and independent variables from the dataset"],"metadata":{"id":"f2sJ3xoXE-RN"}},{"cell_type":"code","source":["# Seperating the dependent and independent variables\n","# Preparing the X variables\n","X = adData.loc[:,0:10]\n","print(X.shape)\n","# Preparing the Y variable\n","Y = adData[11]\n","print(Y.shape)"],"metadata":{"id":"tSbnf3p1Dsot"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing first 15 examples of the independent variables"],"metadata":{"id":"SVv7-MlmFEwj"}},{"cell_type":"code","source":["# Printing the head of the independent variables\n","X.head(15)"],"metadata":{"id":"wo_hKgamD3JU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing the DataTypes of the Dataset"],"metadata":{"id":"jVjyNM0jFTAY"}},{"cell_type":"code","source":["# Printing the data types\n","print(X.dtypes)"],"metadata":{"id":"es_6QQWvD4nm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Replacing special characters with NaN values for first 3 columns"],"metadata":{"id":"Nb6_HuvOFpi3"}},{"cell_type":"code","source":["# Replacing special characters in first 3 columns which are of type object\n","for i in range(0,3):\n","  X[i] = X[i].str.replace(\"?\", 'NaN').values.astype(float)\n"],"metadata":{"id":"hU4RMgRhD7qB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Replacing special characters for Integer values"],"metadata":{"id":"AVL_N5IdF84H"}},{"cell_type":"code","source":["# Replacing special characters in the remaining columns which are of type integer\n","for i in range(3,11):\n","  X[i] = X[i].replace(\"?\", 'NaN').values.astype(float) "],"metadata":{"id":"dBrqtzvDD8Jp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Imputing Mean of each column for NaN values using .mean() function"],"metadata":{"id":"h1ADw3WxGX_0"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Imputing the 'NaN'  with mean of the values\n","for i in range(0,10):\n","  X[i] = X[i].fillna(X[i].mean())\n","  \n","print(X.head(15))"],"metadata":{"id":"rAMZZIIPD-sc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Scaling the dataset using minimaxScaler() function."],"metadata":{"id":"CMrW5QsVGdAr"}},{"cell_type":"code","source":["# Scaling the data sets\n","# Import library function\n","from sklearn import preprocessing\n","# Creating the scaling function\n","minmaxScaler = preprocessing.MinMaxScaler()\n","# Transforming with the scaler function\n","X_tran = pd.DataFrame(minmaxScaler.fit_transform(X))\n","# Printing the output\n","X_tran.head()"],"metadata":{"id":"aLYuvyS8EBVw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Creating a high dimesion dataset"],"metadata":{"id":"XY17NgaN7fXh"}},{"cell_type":"code","source":["# Creating a high dimension data set\n","X_hd = pd.DataFrame(pd.np.tile(X_tran, (1, 50)))\n","\n","print(X_hd.shape)"],"metadata":{"id":"Q622GeT-6Brg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Splitting the high dimensional dataset to trainig and test sets"],"metadata":{"id":"u_J2jsXr8NqU"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","# Splitting the data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X_hd, Y, test_size=0.3, random_state=123)"],"metadata":{"id":"hEAqtvqy7iQK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Defining ICA with number of  components"],"metadata":{"id":"KTYS9KVzsySn"}},{"cell_type":"code","source":["# Defining the ICA with number of components\n","from sklearn.decomposition import FastICA \n","ICA = FastICA(n_components=250, random_state=123) "],"metadata":{"id":"h9k8K2LzswC5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Fitting the ICA method and transforming the training set"],"metadata":{"id":"T9Wgpegl8XBw"}},{"cell_type":"code","source":["# Fitting the ICA method and transforming the training set and noting the time\n","import time\n","t0 = time.time()\n","X_ica=ICA.fit_transform(X_train)\n","t1 = time.time()\n","print(\"ICA fitting time:\", round(t1-t0, 3), \"s\")"],"metadata":{"id":"PuGbmKLQ7m5A"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Transforming test set"],"metadata":{"id":"RQX23YKBtGug"}},{"cell_type":"code","source":["# Transfroming the test set \n","X_test_ica=ICA.transform(X_test)"],"metadata":{"id":"j6zaSAERtFMZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Verifying the shapes of train and test sets before and after transformation"],"metadata":{"id":"gfe2B2Vi9Be7"}},{"cell_type":"code","source":["print(\"original shape of Training set:   \", X_train.shape)\n","print(\"original shape of Test set:   \", X_test.shape)\n","print(\"Transformed shape of training set:\", X_ica.shape)\n","print(\"Transformed shape of test set:\", X_test_ica.shape)"],"metadata":{"id":"62RVvhr57sHT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### fitting the logistic regression model on the transofrmed dataset."],"metadata":{"id":"_7_s3KHp9IS-"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","import time\n","\n","icaModel = LogisticRegression()\n","\n","t0 = time.time()\n","icaModel.fit(X_ica, y_train)\n","t1 = time.time()"],"metadata":{"id":"Txn8n-UD7upv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing the total time. "],"metadata":{"id":"jFlSJABn9OSQ"}},{"cell_type":"code","source":["print(\"Total training time:\", round(t1-t0, 3), \"s\")"],"metadata":{"id":"3CEeVkiv7wHV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Predicting the test set and printing the accuracy metrics."],"metadata":{"id":"WTK74W8w9RJo"}},{"cell_type":"code","source":["# Predicting with the pca model\n","pred = icaModel.predict(X_test_ica)\n","print('Accuracy of Logistic regression model prediction on test set: {:.2f}'.format(icaModel.score(X_test_ica, y_test)))"],"metadata":{"id":"__mXS9ed7ysK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing the confusion matrix."],"metadata":{"id":"1usBp6_89Y4J"}},{"cell_type":"code","source":["# Generating confusion matrix\n","from sklearn.metrics import confusion_matrix\n","\n","confusionMatrix = confusion_matrix(y_test, pred)\n","print(confusionMatrix)"],"metadata":{"id":"CdPpCXmh7zV7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing Classification Report."],"metadata":{"id":"eAyBVRsj9d-G"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","# Getting the Classification_report\n","print(classification_report(y_test, pred))"],"metadata":{"id":"6cMeBaEN70bT"},"execution_count":null,"outputs":[]}]}