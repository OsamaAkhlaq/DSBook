{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Ex-14.03","provenance":[{"file_id":"1yOG_PZqUy9-E885DzHYDwxQxtpTXWBVc","timestamp":1650219699658}],"collapsed_sections":["k5wiSFUICXNj","PqE9wfDvCoqC","vZyzOaIgEoG5","1W0nQsbCEyz2","f2sJ3xoXE-RN","Nb6_HuvOFpi3","AVL_N5IdF84H","h1ADw3WxGX_0","CMrW5QsVGdAr","coN1NIrz4RV1","NmGwQeXE4Ytv","CnHl1bXN4fZn","JdcPxARQ4rjw","-kZlTdjR45aY","ixi0i-dP49T7","nxJ9EmOj5HNv","IrcyOYvB5OlC","ovpSkvh-5REx","LOQb7Q_q5YtV","1UCRgX1Y5b4G"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **Exercise 14.03:**\n","### Dimensionality Reduction Using Forward Feature Selection"],"metadata":{"id":"MdFHocVUQJoM"}},{"cell_type":"markdown","source":["### Importing Modules"],"metadata":{"id":"k5wiSFUICXNj"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"C3ZLhsDjB4HU"},"outputs":[],"source":["import pandas as pd\n"]},{"cell_type":"markdown","source":["### Loading  Data"],"metadata":{"id":"PqE9wfDvCoqC"}},{"cell_type":"code","source":["# Defining file name of the git hub repository\n","\n","filename = './hcvdata.csv'\n"],"metadata":{"id":"HnjcyPM6CPz4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Loading the data using pandas\n","\n","adData = pd.read_csv(filename,sep=\",\",header = None,error_bad_lines=False)\n"],"metadata":{"id":"HR08AVBlCRH-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292887751,"user_tz":-300,"elapsed":7,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"27e4d442-ad98-4bc0-be64-a1dca456259d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2882: FutureWarning: The error_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  exec(code_obj, self.user_global_ns, self.user_ns)\n"]}]},{"cell_type":"markdown","source":["### Printing the Shape of  the Dataset"],"metadata":{"id":"vZyzOaIgEoG5"}},{"cell_type":"code","source":["# Printing the shape of the data\n","print(adData.shape)"],"metadata":{"id":"A710VMACDgok","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292887751,"user_tz":-300,"elapsed":4,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"51008644-9740-4c6b-91b2-0810256b3233"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(615, 12)\n"]}]},{"cell_type":"markdown","source":["### Finding the summary of the numerical raw data using .describe() function"],"metadata":{"id":"1W0nQsbCEyz2"}},{"cell_type":"code","source":["#Summarizing the statistics of the numerical raw data\n","adData.describe()"],"metadata":{"id":"dEAQn-PeDqan","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292888182,"user_tz":-300,"elapsed":14,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"bf020292-89b4-422d-e58a-2746cf22bbce"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               3           4           5           6           7           8   \\\n","count  600.000000  615.000000  615.000000  615.000000  615.000000  615.000000   \n","mean    68.311333   28.580488   34.832520   11.440650    8.206504    5.362602   \n","std     26.043468   25.569850   33.094568   19.669152    2.201115    1.164163   \n","min     11.300000    1.000000   11.000000    1.000000    1.000000    1.000000   \n","25%     52.500000   16.000000   22.000000    5.000000    7.000000    5.000000   \n","50%     66.250000   23.000000   26.000000    7.000000    8.000000    5.000000   \n","75%     80.275000   33.000000   33.000000   11.000000   10.000000    6.000000   \n","max    416.600000  325.000000  324.000000  254.000000   16.000000   10.000000   \n","\n","                9           10          11  \n","count   615.000000  615.000000  615.000000  \n","mean     81.289431   39.562602   72.073171  \n","std      49.751082   54.667090    5.408358  \n","min       8.000000    5.000000   45.000000  \n","25%      67.000000   16.000000   69.000000  \n","50%      77.000000   23.000000   72.000000  \n","75%      88.000000   40.000000   75.000000  \n","max    1079.000000  651.000000   90.000000  "],"text/html":["\n","  <div id=\"df-42fefc68-6e6f-4736-9b2d-a53d96e25890\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>600.000000</td>\n","      <td>615.000000</td>\n","      <td>615.000000</td>\n","      <td>615.000000</td>\n","      <td>615.000000</td>\n","      <td>615.000000</td>\n","      <td>615.000000</td>\n","      <td>615.000000</td>\n","      <td>615.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>68.311333</td>\n","      <td>28.580488</td>\n","      <td>34.832520</td>\n","      <td>11.440650</td>\n","      <td>8.206504</td>\n","      <td>5.362602</td>\n","      <td>81.289431</td>\n","      <td>39.562602</td>\n","      <td>72.073171</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>26.043468</td>\n","      <td>25.569850</td>\n","      <td>33.094568</td>\n","      <td>19.669152</td>\n","      <td>2.201115</td>\n","      <td>1.164163</td>\n","      <td>49.751082</td>\n","      <td>54.667090</td>\n","      <td>5.408358</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>11.300000</td>\n","      <td>1.000000</td>\n","      <td>11.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>8.000000</td>\n","      <td>5.000000</td>\n","      <td>45.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>52.500000</td>\n","      <td>16.000000</td>\n","      <td>22.000000</td>\n","      <td>5.000000</td>\n","      <td>7.000000</td>\n","      <td>5.000000</td>\n","      <td>67.000000</td>\n","      <td>16.000000</td>\n","      <td>69.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>66.250000</td>\n","      <td>23.000000</td>\n","      <td>26.000000</td>\n","      <td>7.000000</td>\n","      <td>8.000000</td>\n","      <td>5.000000</td>\n","      <td>77.000000</td>\n","      <td>23.000000</td>\n","      <td>72.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>80.275000</td>\n","      <td>33.000000</td>\n","      <td>33.000000</td>\n","      <td>11.000000</td>\n","      <td>10.000000</td>\n","      <td>6.000000</td>\n","      <td>88.000000</td>\n","      <td>40.000000</td>\n","      <td>75.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>416.600000</td>\n","      <td>325.000000</td>\n","      <td>324.000000</td>\n","      <td>254.000000</td>\n","      <td>16.000000</td>\n","      <td>10.000000</td>\n","      <td>1079.000000</td>\n","      <td>651.000000</td>\n","      <td>90.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42fefc68-6e6f-4736-9b2d-a53d96e25890')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-42fefc68-6e6f-4736-9b2d-a53d96e25890 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-42fefc68-6e6f-4736-9b2d-a53d96e25890');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["### Seperating the dependent and independent variables from the dataset"],"metadata":{"id":"f2sJ3xoXE-RN"}},{"cell_type":"code","source":["# Seperating the dependent and independent variables\n","# Preparing the X variables\n","X = adData.loc[:,0:10]\n","print(X.shape)\n","# Preparing the Y variable\n","Y = adData[11]\n","print(Y.shape)"],"metadata":{"id":"tSbnf3p1Dsot","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292888183,"user_tz":-300,"elapsed":12,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"af156506-a7de-405c-e5a7-fe990f13c5be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(615, 11)\n","(615,)\n"]}]},{"cell_type":"markdown","source":["### Replacing special characters with NaN values for first 3 columns"],"metadata":{"id":"Nb6_HuvOFpi3"}},{"cell_type":"code","source":["# Replacing special characters in first 3 columns which are of type object\n","for i in range(0,3):\n","  X[i] = X[i].str.replace(\"?\", 'NaN').values.astype(float)\n","print(X.head(15))"],"metadata":{"id":"hU4RMgRhD7qB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292888183,"user_tz":-300,"elapsed":10,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"54929a7f-efe5-4bf8-aa13-cdc18b52cf83"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      0     1     2     3   4   5   6   7   8    9   10\n","0    1.0  32.0  39.0  52.5   8  22   8   7   3  106  12\n","1    2.0  32.0  39.0  70.3  18  25   4  11   5   74  16\n","2    3.0  32.0  47.0  74.7  36  53   6   9   5   86  33\n","3    4.0  32.0  43.0  52.0  31  23  19   7   5   80  34\n","4    5.0  32.0  39.0  74.1  33  25  10   9   4   76  30\n","5    6.0  32.0  42.0  43.3  19  20  12  10   6  111  91\n","6    7.0  32.0  46.0  41.3  18  18   9   7   5   70  17\n","7    8.0  32.0  42.0  41.9  36  31  16   6   5  109  22\n","8    9.0  32.0  51.0  65.5  23  21   7   9   4   83  14\n","9    NaN   NaN   NaN  86.3  20  20  35   5   4   81  16\n","10  11.0  32.0  44.0  52.3  22  22  17   4   4   78  24\n","11  12.0  33.0  46.0  68.2  10  20   6   7   4   79  19\n","12  13.0  33.0  36.0  78.6  24  22   7   9   5   78  19\n","13  14.0  33.0  39.0  51.7  16  24   7   6   3   65   7\n","14  15.0  33.0  39.0  39.8  23  23   4   5   5   63  15\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"]}]},{"cell_type":"markdown","source":["### Replacing special characters for Integer values"],"metadata":{"id":"AVL_N5IdF84H"}},{"cell_type":"code","source":["# Replacing special characters in the remaining columns which are of type integer\n","for i in range(3,11):\n","  X[i] = X[i].replace(\"?\", 'NaN').values.astype(float) "],"metadata":{"id":"dBrqtzvDD8Jp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Imputing Mean of each column for NaN values using .mean() function"],"metadata":{"id":"h1ADw3WxGX_0"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Imputing the 'NaN'  with mean of the values\n","for i in range(0,10):\n","  X[i] = X[i].fillna(X[i].mean())\n","  \n","print(X.head(15))"],"metadata":{"id":"rAMZZIIPD-sc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292888184,"user_tz":-300,"elapsed":10,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"d0495963-ceb7-4867-ea88-ecb2b2b88846"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["            0          1          2     3     4     5     6     7    8   \\\n","0     1.000000  32.000000  39.000000  52.5   8.0  22.0   8.0   7.0  3.0   \n","1     2.000000  32.000000  39.000000  70.3  18.0  25.0   4.0  11.0  5.0   \n","2     3.000000  32.000000  47.000000  74.7  36.0  53.0   6.0   9.0  5.0   \n","3     4.000000  32.000000  43.000000  52.0  31.0  23.0  19.0   7.0  5.0   \n","4     5.000000  32.000000  39.000000  74.1  33.0  25.0  10.0   9.0  4.0   \n","5     6.000000  32.000000  42.000000  43.3  19.0  20.0  12.0  10.0  6.0   \n","6     7.000000  32.000000  46.000000  41.3  18.0  18.0   9.0   7.0  5.0   \n","7     8.000000  32.000000  42.000000  41.9  36.0  31.0  16.0   6.0  5.0   \n","8     9.000000  32.000000  51.000000  65.5  23.0  21.0   7.0   9.0  4.0   \n","9   308.485342  47.470588  41.647059  86.3  20.0  20.0  35.0   5.0  4.0   \n","10   11.000000  32.000000  44.000000  52.3  22.0  22.0  17.0   4.0  4.0   \n","11   12.000000  33.000000  46.000000  68.2  10.0  20.0   6.0   7.0  4.0   \n","12   13.000000  33.000000  36.000000  78.6  24.0  22.0   7.0   9.0  5.0   \n","13   14.000000  33.000000  39.000000  51.7  16.0  24.0   7.0   6.0  3.0   \n","14   15.000000  33.000000  39.000000  39.8  23.0  23.0   4.0   5.0  5.0   \n","\n","       9     10  \n","0   106.0  12.0  \n","1    74.0  16.0  \n","2    86.0  33.0  \n","3    80.0  34.0  \n","4    76.0  30.0  \n","5   111.0  91.0  \n","6    70.0  17.0  \n","7   109.0  22.0  \n","8    83.0  14.0  \n","9    81.0  16.0  \n","10   78.0  24.0  \n","11   79.0  19.0  \n","12   78.0  19.0  \n","13   65.0   7.0  \n","14   63.0  15.0  \n"]}]},{"cell_type":"markdown","source":["### Scaling the dataset using minimaxScaler() function."],"metadata":{"id":"CMrW5QsVGdAr"}},{"cell_type":"code","source":["# Scaling the data sets\n","# Import library function\n","from sklearn import preprocessing\n","# Creating the scaling function\n","minmaxScaler = preprocessing.MinMaxScaler()\n","# Transforming with the scaler function\n","X_tran = pd.DataFrame(minmaxScaler.fit_transform(X))\n","# Printing the output\n","X_tran.head()"],"metadata":{"id":"aLYuvyS8EBVw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292888732,"user_tz":-300,"elapsed":557,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"0cb87233-c823-4f0a-a224-0a65ca9f3dc1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         0         1         2         3         4         5         6   \\\n","0  0.000000  0.224138  0.358209  0.101653  0.021605  0.035144  0.027668   \n","1  0.001629  0.224138  0.358209  0.145571  0.052469  0.044728  0.011858   \n","2  0.003257  0.224138  0.477612  0.156427  0.108025  0.134185  0.019763   \n","3  0.004886  0.224138  0.417910  0.100419  0.092593  0.038339  0.071146   \n","4  0.006515  0.224138  0.358209  0.154947  0.098765  0.044728  0.035573   \n","\n","         7         8         9         10  \n","0  0.400000  0.222222  0.091503  0.010836  \n","1  0.666667  0.444444  0.061625  0.017028  \n","2  0.533333  0.444444  0.072829  0.043344  \n","3  0.400000  0.444444  0.067227  0.044892  \n","4  0.533333  0.333333  0.063492  0.038700  "],"text/html":["\n","  <div id=\"df-3a8dec90-9625-4cbb-a474-8291a3f58ec1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","      <td>0.224138</td>\n","      <td>0.358209</td>\n","      <td>0.101653</td>\n","      <td>0.021605</td>\n","      <td>0.035144</td>\n","      <td>0.027668</td>\n","      <td>0.400000</td>\n","      <td>0.222222</td>\n","      <td>0.091503</td>\n","      <td>0.010836</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.001629</td>\n","      <td>0.224138</td>\n","      <td>0.358209</td>\n","      <td>0.145571</td>\n","      <td>0.052469</td>\n","      <td>0.044728</td>\n","      <td>0.011858</td>\n","      <td>0.666667</td>\n","      <td>0.444444</td>\n","      <td>0.061625</td>\n","      <td>0.017028</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.003257</td>\n","      <td>0.224138</td>\n","      <td>0.477612</td>\n","      <td>0.156427</td>\n","      <td>0.108025</td>\n","      <td>0.134185</td>\n","      <td>0.019763</td>\n","      <td>0.533333</td>\n","      <td>0.444444</td>\n","      <td>0.072829</td>\n","      <td>0.043344</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.004886</td>\n","      <td>0.224138</td>\n","      <td>0.417910</td>\n","      <td>0.100419</td>\n","      <td>0.092593</td>\n","      <td>0.038339</td>\n","      <td>0.071146</td>\n","      <td>0.400000</td>\n","      <td>0.444444</td>\n","      <td>0.067227</td>\n","      <td>0.044892</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.006515</td>\n","      <td>0.224138</td>\n","      <td>0.358209</td>\n","      <td>0.154947</td>\n","      <td>0.098765</td>\n","      <td>0.044728</td>\n","      <td>0.035573</td>\n","      <td>0.533333</td>\n","      <td>0.333333</td>\n","      <td>0.063492</td>\n","      <td>0.038700</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a8dec90-9625-4cbb-a474-8291a3f58ec1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3a8dec90-9625-4cbb-a474-8291a3f58ec1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3a8dec90-9625-4cbb-a474-8291a3f58ec1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["### Creating a high-Dimesional dataset"],"metadata":{"id":"coN1NIrz4RV1"}},{"cell_type":"code","source":["# Creating a high dimension data set\n","X_hd = pd.DataFrame(pd.np.tile(X_tran, (1, 50)))\n","\n","print(X_hd.shape)"],"metadata":{"id":"JxIqtOubyLqV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292888733,"user_tz":-300,"elapsed":14,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"e02b0e7f-a82b-4523-c573-c32a6691e405"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(615, 550)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: FutureWarning: The pandas.np module is deprecated and will be removed from pandas in a future version. Import numpy directly instead\n","  \n"]}]},{"cell_type":"markdown","source":["### Splitting the high dimensional dataset into training and testing sets."],"metadata":{"id":"NmGwQeXE4Ytv"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","# Splitting the data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X_hd, Y, test_size=0.3, random_state=123)"],"metadata":{"id":"jaQolG2hyOqe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Defining the threshold features by importing the feature selection function, SelectKBest()"],"metadata":{"id":"CnHl1bXN4fZn"}},{"cell_type":"code","source":["from sklearn.feature_selection import SelectKBest\n","\n","# feature extraction\n","feats = SelectKBest(k=250)"],"metadata":{"id":"mu21FFm7ySd3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Iterating and getting the best set of threshold features by fitting on the training set using .fit()"],"metadata":{"id":"JdcPxARQ4rjw"}},{"cell_type":"code","source":["# Fitting the features for training set\n","import time\n","t0 = time.time()\n","fit = feats.fit(X_train, y_train)\n","t1 = time.time()\n","print(\"Forward selection fitting time:\", round(t1-t0, 3), \"s\")"],"metadata":{"id":"B29OzyP1yVNh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Creating new training set and testing sets"],"metadata":{"id":"-kZlTdjR45aY"}},{"cell_type":"code","source":["# Creating new training set and test sets \n","\n","features_train = fit.transform(X_train)\n","features_test = fit.transform(X_test)"],"metadata":{"id":"OkZ7KabtyYCn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Verifying the shapes of the training and testing sets before and after transformation. "],"metadata":{"id":"ixi0i-dP49T7"}},{"cell_type":"code","source":["# Printing the shape of train and test sets before transformation\n","print('Train shape before transformation',X_train.shape)\n","print('Test shape before transformation',X_test.shape)\n","\n","# Printing the shape of train and test sets after transformation\n","print('Train shape after transformation',features_train.shape)\n","print('Test shape after transformation',features_test.shape)"],"metadata":{"id":"fjI1C3f6yaP4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292888735,"user_tz":-300,"elapsed":12,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"77909dca-a808-4f38-fb81-7ded9b74c3df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train shape before transformation (430, 550)\n","Test shape before transformation (185, 550)\n","Train shape after transformation (430, 250)\n","Test shape after transformation (185, 250)\n"]}]},{"cell_type":"markdown","source":["### Fitting a logistic regression model on the transformed dataset"],"metadata":{"id":"nxJ9EmOj5HNv"}},{"cell_type":"code","source":["# Fitting a Logistic Regression Model\n","from sklearn.linear_model import LogisticRegression\n","import time\n","\n","t0 = time.time()\n","\n","forwardModel = LogisticRegression()\n","print(features_train)\n","forwardModel.fit(features_train, y_train)\n","\n","t1 = time.time()"],"metadata":{"id":"LvoNAE6OydBn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292889176,"user_tz":-300,"elapsed":450,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"ca8c8aaf-eae1-46cb-961a-0da9d329b4d5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.10447761 0.07623982 0.02777778 ... 0.02777778 0.00395257 0.05228758]\n"," [0.56716418 0.16703676 0.08950617 ... 0.08950617 0.0513834  0.07376284]\n"," [0.40298507 0.3106341  0.04012346 ... 0.04012346 0.00790514 0.03734827]\n"," ...\n"," [0.35820896 0.17715273 0.0617284  ... 0.0617284  0.01185771 0.04668534]\n"," [0.23880597 0.23365408 0.04938272 ... 0.04938272 0.00395257 0.05602241]\n"," [0.47761194 0.15667407 0.10802469 ... 0.10802469 0.01581028 0.05788982]]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]}]},{"cell_type":"markdown","source":["### Printing the total time"],"metadata":{"id":"IrcyOYvB5OlC"}},{"cell_type":"code","source":["print(\"Total training time:\", round(t1-t0, 3), \"s\")"],"metadata":{"id":"klLutLQgyfXl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292889176,"user_tz":-300,"elapsed":6,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"2ca846dd-a6a1-44bf-b278-146b37588513"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total training time: 0.44 s\n"]}]},{"cell_type":"markdown","source":["### Performing predictions on the test set and print the accuracy metrics. "],"metadata":{"id":"ovpSkvh-5REx"}},{"cell_type":"code","source":["# Predicting with the forward model\n","pred = forwardModel.predict(features_test)\n","print('Accuracy of Logistic regression model prediction on test set: {:.2f}'.format(forwardModel.score(features_test, y_test)))"],"metadata":{"id":"ukl0efVsyjPb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292889177,"user_tz":-300,"elapsed":7,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"442befb5-dd11-4766-d45b-3852adf53096"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Logistic regression model prediction on test set: 0.09\n"]}]},{"cell_type":"markdown","source":["### Printing COnfusion Matrix"],"metadata":{"id":"LOQb7Q_q5YtV"}},{"cell_type":"code","source":["# Generating confusion matrix\n","from sklearn.metrics import confusion_matrix\n","\n","confusionMatrix = confusion_matrix(y_test, pred)\n","print(confusionMatrix)"],"metadata":{"id":"3v-acRCRyofo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292889177,"user_tz":-300,"elapsed":6,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"f5251826-359c-4829-9e6f-3b2ff6e2de3e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  1  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  2  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  3  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  7  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6  0  0  1  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  5  2  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  8  2  0  0  0  0  1  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  8  2  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 13  3  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  9  6  0  1  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  8  8  0  1  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  9  5  0  1  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0 10  1  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  6  4  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  8  1  1  1  0  0  1  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  5  3  0  1  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  5  2  0  0  1  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  0  1  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  1  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n","   0  0  0  0  0]]\n"]}]},{"cell_type":"markdown","source":["### Prinnting the classification report."],"metadata":{"id":"1UCRgX1Y5b4G"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","# Getting the Classification_report\n","print(classification_report(y_test, pred))"],"metadata":{"id":"zbe6G9_xyqnW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650292889177,"user_tz":-300,"elapsed":6,"user":{"displayName":"Farzam Habib Khan","userId":"00930916907964807935"}},"outputId":"7c855c5c-3bc1-4a24-ac71-c6a43b6b14d9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","          48       0.00      0.00      0.00         1\n","          53       0.00      0.00      0.00         1\n","          56       0.00      0.00      0.00         1\n","          57       0.00      0.00      0.00         2\n","          58       0.00      0.00      0.00         0\n","          59       0.00      0.00      0.00         1\n","          61       0.00      0.00      0.00         0\n","          63       0.00      0.00      0.00         2\n","          64       0.00      0.00      0.00         2\n","          65       0.00      0.00      0.00         3\n","          66       0.00      0.00      0.00         7\n","          67       0.00      0.00      0.00         7\n","          68       0.00      0.00      0.00         8\n","          69       0.00      0.00      0.00        12\n","          70       0.00      0.00      0.00        11\n","          71       0.00      0.00      0.00        17\n","          72       0.08      0.53      0.13        17\n","          73       0.19      0.47      0.27        17\n","          74       0.00      0.00      0.00        15\n","          75       0.00      0.00      0.00        12\n","          76       0.00      0.00      0.00        11\n","          77       0.00      0.00      0.00        12\n","          78       0.00      0.00      0.00         9\n","          79       0.00      0.00      0.00         8\n","          80       0.00      0.00      0.00         3\n","          81       0.00      0.00      0.00         3\n","          82       0.00      0.00      0.00         2\n","          84       0.00      0.00      0.00         0\n","          90       0.00      0.00      0.00         1\n","\n","    accuracy                           0.09       185\n","   macro avg       0.01      0.03      0.01       185\n","weighted avg       0.02      0.09      0.04       185\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]}]}