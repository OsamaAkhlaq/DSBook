{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Ex-14.02","provenance":[{"file_id":"1yOG_PZqUy9-E885DzHYDwxQxtpTXWBVc","timestamp":1650212689614}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **Exercise 14.02:** \n","### Dimensionality Reduction Using Backward Feature Elimination"],"metadata":{"id":"t0GOf61ONicH"}},{"cell_type":"markdown","source":["### Importing Modules"],"metadata":{"id":"k5wiSFUICXNj"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"C3ZLhsDjB4HU"},"outputs":[],"source":["import pandas as pd\n"]},{"cell_type":"markdown","source":["### Loading  Data"],"metadata":{"id":"PqE9wfDvCoqC"}},{"cell_type":"code","source":["# Defining file name of the git hub repository\n","\n","filename = './hcvdata.csv'\n"],"metadata":{"id":"HnjcyPM6CPz4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Loading the data using pandas\n","\n","adData = pd.read_csv(filename,sep=\",\",header = None,error_bad_lines=False)\n","adData.head()"],"metadata":{"id":"HR08AVBlCRH-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing the Shape of  the Dataset"],"metadata":{"id":"vZyzOaIgEoG5"}},{"cell_type":"code","source":["# Printing the shape of the data\n","print(adData.shape)"],"metadata":{"id":"A710VMACDgok"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Seperating the dependent and independent variables from the dataset"],"metadata":{"id":"f2sJ3xoXE-RN"}},{"cell_type":"code","source":["# Seperating the dependent and independent variables\n","# Preparing the X variables\n","X = adData.loc[:,0:10]\n","print(X.shape)\n","# Preparing the Y variable\n","Y = adData[11]\n","print(Y.shape)"],"metadata":{"id":"tSbnf3p1Dsot"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Replacing special characters with NaN values for first 3 columns"],"metadata":{"id":"Nb6_HuvOFpi3"}},{"cell_type":"code","source":["# Replacing special characters in first 3 columns which are of type object\n","for i in range(0,3):\n","  X[i] = X[i].str.replace(\"?\", 'NaN').values.astype(float)\n","print(X.head(15))"],"metadata":{"id":"hU4RMgRhD7qB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Replacing special characters for Integer values"],"metadata":{"id":"AVL_N5IdF84H"}},{"cell_type":"code","source":["# Replacing special characters in the remaining columns which are of type integer\n","for i in range(3,11):\n","  X[i] = X[i].replace(\"?\", 'NaN').values.astype(float) "],"metadata":{"id":"dBrqtzvDD8Jp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Imputing Mean of each column for NaN values using .mean() function"],"metadata":{"id":"h1ADw3WxGX_0"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Imputing the 'NaN'  with mean of the values\n","for i in range(0,10):\n","  X[i] = X[i].fillna(X[i].mean())\n","  "],"metadata":{"id":"rAMZZIIPD-sc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Scaling the dataset using minimaxScaler() function."],"metadata":{"id":"CMrW5QsVGdAr"}},{"cell_type":"code","source":["# Scaling the data sets\n","# Import library function\n","from sklearn import preprocessing\n","# Creating the scaling function\n","minmaxScaler = preprocessing.MinMaxScaler()\n","# Transforming with the scaler function\n","X_tran = pd.DataFrame(minmaxScaler.fit_transform(X))\n","# Printing the output\n","X_tran.head()"],"metadata":{"id":"aLYuvyS8EBVw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Normalizing Datasets"],"metadata":{"id":"uM7tLiWyX4zl"}},{"cell_type":"code","source":["# Normalising the data sets\n","# Normalising data\n","from sklearn import preprocessing\n","# Creating the scaling function\n","minmaxScaler = preprocessing.MinMaxScaler()\n","X_tran = pd.DataFrame(minmaxScaler.fit_transform(X))\n","X_tran.head()"],"metadata":{"id":"XQ_FyhFgWD6N"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Creating High Dimension Dataset"],"metadata":{"id":"OgM8zUPRYDFE"}},{"cell_type":"code","source":["# Creating a high dimension data set\n","X_hd = pd.DataFrame(pd.np.tile(X_tran, (1, 2)))\n","\n","print(X_hd.shape)"],"metadata":{"id":"wKzUXcTFX9ji"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Defining a backward elimination model by providing two arguments to the RFE() function."],"metadata":{"id":"3P42bHz9ZHPS"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","from sklearn.feature_selection import RFE\n","\n","# Defining the Classification function\n","backModel = LogisticRegression()\n","print(backModel)\n","# Reducing dimensionality to 250 features for backward elimination model\n","rfe = RFE(backModel, 250)"],"metadata":{"id":"IL62FSUOX9gM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Fitting Backward Elimination method to identify the  best 250 features."],"metadata":{"id":"Chaea41QZSFQ"}},{"cell_type":"code","source":["# Fitting the rfe for selecting the top 250 features\n","import time\n","t0 = time.time()\n","rfe = rfe.fit(X_hd, Y)\n","t1 = time.time()\n","print(\"Backward Elimination time:\", round(t1-t0, 3), \"s\")"],"metadata":{"id":"9eIvTuvWYJAL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Getting the indexes of the features using backward elimination method"],"metadata":{"id":"8xUYYno_ZxHX"}},{"cell_type":"code","source":["# Getting the indexes of the features used\n","rfe.get_support(indices = True)"],"metadata":{"id":"9v5l6-epYSes"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Splitting the dataset  into training and testing sets for modeling."],"metadata":{"id":"YSujFbhwZ60O"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","# Splitting the data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X_hd, Y, test_size=0.3, random_state=123)\n","\n","print('Training set shape',X_train.shape)\n","\n","print('Test set shape',X_test.shape)"],"metadata":{"id":"WJz6mv1wYT5W"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Transformingthe train and tst sets."],"metadata":{"id":"-fLHfEkTaAeO"}},{"cell_type":"code","source":["# Transforming both train and test sets\n","\n","X_train_tran = rfe.transform(X_train)\n","\n","X_test_tran = rfe.transform(X_test)\n","\n","print(\"Training set shape\",X_train_tran.shape)\n","\n","print(\"Test set shape\",X_test_tran.shape)"],"metadata":{"id":"Z2Wp-A4BYWJu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Fitting a logistix regression model on the training set."],"metadata":{"id":"1CdKDq0KaGqD"}},{"cell_type":"code","source":["# Fitting the logistic regression model \n","import time\n","# Defining the LogisticRegression function\n","RfeModel = LogisticRegression()\n","# Starting a timing function\n","t0=time.time()\n","# Fitting the model\n","RfeModel.fit(X_train_tran, y_train)\n","# Finding the end time \n","\n","print(\"Total training time:\", round(time.time()-t0, 3), \"s\")"],"metadata":{"id":"uPB1C4xvYXhV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Predicting on the test set and getting the accuracy."],"metadata":{"id":"cMhAoBbmaMcR"}},{"cell_type":"code","source":["# Predicting on the test set and getting the accuracy\n","pred = RfeModel.predict(X_test_tran)\n","\n","print('Accuracy of Logistic regression model after backward elimination: {:.2f}'.format(RfeModel.score(X_test_tran, y_test)))"],"metadata":{"id":"qDbO8MP3Yq-b"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing the confusion matrix."],"metadata":{"id":"7RBAnGD9aWHx"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","confusionMatrix = confusion_matrix(y_test, pred)\n","print(confusionMatrix)"],"metadata":{"id":"fopzOKWiYvcq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Printing the classification report. "],"metadata":{"id":"rdsBnFm8aaqY"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","# Getting the Classification_report\n","print(classification_report(y_test, pred))"],"metadata":{"id":"sf61ZSp1YwyN"},"execution_count":null,"outputs":[]}]}